name: Publish Release

'on':
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: read

jobs:
  publish:
    name: Publish Release
    if: |
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Dynamic environment based on PR labels
    environment: >
      ${{ contains(github.event.pull_request.labels.*.name, 'release-target:release') &&
      'release' || 'testpypi' }}
    permissions:
      id-token: write  # OIDC for PyPI/TestPyPI
      contents: write  # For creating git tags
    outputs:
      version: ${{ steps.metadata.outputs.version }}
      target: ${{ steps.metadata.outputs.target }}

    steps:
      - name: Checkout
        uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791  # v4.1.0
        with:
          fetch-depth: 0  # Required for git operations
          ref: main  # Use the merged version

      - name: Setup uv
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4  # v6.7.0
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
          prune-cache: false

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Extract release metadata
        id: metadata
        run: |
          # Extract version from PR labels
          VERSION=""
          TARGET=""

          # Parse labels from PR
          echo '${{ toJSON(github.event.pull_request.labels.*.name) }}' > labels.json

          # Extract version
          VERSION=$(jq -r '.[] | select(startswith("release-version:")) | sub("release-version:"; "")' labels.json)

          # Extract target environment
          if jq -r '.[]' labels.json | grep -q "release-target:release"; then
            TARGET="release"
          else
            TARGET="testpypi"
          fi

          # Validate
          if [[ -z "$VERSION" ]]; then
            echo "::error::Could not extract version from PR labels"
            exit 1
          fi

          echo "Extracted metadata:"
          echo "  Version: $VERSION"
          echo "  Target: $TARGET"

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "target=$TARGET" >> "$GITHUB_OUTPUT"

      - name: Verify version in pyproject.toml
        run: |
          # Ensure the version in the file matches what we expect
          FILE_VERSION=$(uv run python -c \
            "import tomllib; import pathlib; \
            print(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])")

          if [[ "$FILE_VERSION" != "${{ steps.metadata.outputs.version }}" ]]; then
            echo "::error::Version mismatch!"
            echo "::error::Expected: ${{ steps.metadata.outputs.version }}"
            echo "::error::Found in pyproject.toml: $FILE_VERSION"
            exit 1
          fi

          echo "✅ Version verification passed: $FILE_VERSION"

      - name: Build packages
        run: |
          echo "Building packages for v${{ steps.metadata.outputs.version }}..."
          rm -rf dist/
          uv build
          echo "Built packages:"
          ls -la dist/

      - name: Create Git tag (production only)
        if: steps.metadata.outputs.target == 'release'
        run: |
          echo "Creating git tag for production release..."
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          TAG="v${{ steps.metadata.outputs.version }}"

          # Create annotated tag
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

          echo "✅ Created and pushed tag: $TAG"

      - name: Publish to TestPyPI
        if: steps.metadata.outputs.target == 'testpypi'
        run: |
          echo "Publishing v${{ steps.metadata.outputs.version }} to TestPyPI..."
          uv publish --publish-url https://test.pypi.org/legacy/ --trusted-publishing always
          echo "✅ Published to TestPyPI"

      - name: Publish to PyPI
        if: steps.metadata.outputs.target == 'release'
        run: |
          echo "Publishing v${{ steps.metadata.outputs.version }} to production PyPI..."
          uv publish --trusted-publishing always
          echo "✅ Published to PyPI"

      - name: Create GitHub Release (production only)
        if: steps.metadata.outputs.target == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.metadata.outputs.version }}
          name: v${{ steps.metadata.outputs.version }}
          generate_release_notes: true
          files: dist/*
          draft: false
          prerelease: false

      - name: Release summary
        if: always()
        run: |
          {
            echo "## 🚀 Release Published"
            echo ""
            echo "**Version**: v${{ steps.metadata.outputs.version }}"
            echo "**Target**: ${{ steps.metadata.outputs.target }}"
            echo "**PR**: #${{ github.event.pull_request.number }}"
            echo ""

            if [[ "${{ steps.metadata.outputs.target }}" == "release" ]]; then
              echo "### 🎉 Production Release"
              echo "- ✅ Published to PyPI"
              echo "- ✅ Git tag created"
              echo "- ✅ GitHub release created"
              echo ""
              echo "**Links:**"
              echo "- 📦 [PyPI Package](https://pypi.org/project/injx/${{ steps.metadata.outputs.version }}/)"
              REPO_URL="https://github.com/${{ github.repository }}/releases/tag/v${{ steps.metadata.outputs.version }}"
              echo "- 🏷️ [GitHub Release]($REPO_URL)"
            else
              echo "### 🧪 TestPyPI Release"
              echo "- ✅ Published to TestPyPI"
              echo "- ⚠️ No git tags created (test only)"
              echo ""
              echo "**Test the release:**"
              echo "\`\`\`bash"
              echo "pip install -i https://test.pypi.org/simple/ injx==${{ steps.metadata.outputs.version }}"
              echo "\`\`\`"
              echo ""
              echo "**If tests pass, create production release using the same process.**"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

  docs:
    name: Deploy Documentation
    needs: publish
    if: needs.publish.outputs.target == 'release'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791  # v4.1.0
        with:
          fetch-depth: 0  # Required for mike
          ref: main  # Get the latest with version bump

      - name: Setup uv
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4  # v6.7.0
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
          prune-cache: false

      - name: Install documentation dependencies
        run: uv sync --extra docs

      - name: Configure git for mike
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Deploy versioned documentation
        run: |
          VERSION="${{ needs.publish.outputs.version }}"

          # Check if this is a pre-release
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Stable release: update 'latest' alias
            echo "Deploying docs for v$VERSION and updating 'latest'"
            uv run mike deploy --push --branch gh-pages --update-aliases "$VERSION" latest
          else
            # Pre-release: don't update 'latest'
            echo "Deploying pre-release docs for v$VERSION"
            uv run mike deploy --push --branch gh-pages "$VERSION"
          fi

          echo "Documentation deployed successfully"
