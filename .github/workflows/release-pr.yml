name: Create Release PR

'on':
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Release target environment'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - release

permissions:
  contents: write  # For creating branches and PRs
  pull-requests: write  # For creating PRs

jobs:
  create-release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791  # v4.1.0
        with:
          fetch-depth: 0  # Required for semantic-release
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup uv
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4  # v6.7.0
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
          prune-cache: false

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Calculate next version
        id: version
        run: |
          # Get current version
          CURRENT=$(uv run python -c \
            "import tomllib; import pathlib; \
            print(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])")
          echo "Current version: $CURRENT"

          # Calculate next version from commits
          NEXT=$(uv run semantic-release version --print)
          echo "Next version: $NEXT"

          if [[ "$NEXT" == "$CURRENT" ]]; then
            echo "::notice::No release needed - no changes since v$CURRENT"
            echo "needs_release=false" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::Release needed: v$CURRENT → v$NEXT"
            echo "needs_release=true" >> "$GITHUB_OUTPUT"
            echo "current=$CURRENT" >> "$GITHUB_OUTPUT"
            echo "next=$NEXT" >> "$GITHUB_OUTPUT"
          fi

      - name: Create release branch
        if: steps.version.outputs.needs_release == 'true'
        id: branch
        run: |
          BRANCH="release/v${{ steps.version.outputs.next }}-${{ inputs.target_environment }}"
          echo "Creating branch: $BRANCH"

          git checkout -b "$BRANCH"

          # Update version and changelog locally (no push to main)
          echo "Running semantic-release to update version and changelog..."
          uv run semantic-release -v version --no-push --no-vcs-release

          # Commit the changes
          git add pyproject.toml CHANGELOG.md
          git commit -m \
            "chore(release): prepare v${{ steps.version.outputs.next }} for ${{ inputs.target_environment }}"

          # Push the release branch
          git push -u origin "$BRANCH"

          echo "branch_name=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request
        if: steps.version.outputs.needs_release == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create PR with metadata in labels
          gh pr create \
            --title "🚀 Release v${{ steps.version.outputs.next }} to ${{ inputs.target_environment }}" \
            --body "## Automated Release PR

          **Version**: ${{ steps.version.outputs.current }} → ${{ steps.version.outputs.next }}
          **Target**: ${{ inputs.target_environment }}
          **Branch**: ${{ steps.branch.outputs.branch_name }}

          ### Changes in this PR:
          - ✅ Version bump in \`pyproject.toml\`
          - ✅ Updated \`CHANGELOG.md\`

          ### What happens after merge:
          - 🔄 Automatic publishing to ${{ inputs.target_environment }}
          ${{ inputs.target_environment == 'release' &&
          '- 🏷️ Git tag creation' || '- ⚠️ No git tags (TestPyPI only)' }}
          ${{ inputs.target_environment == 'release' &&
          '- 📋 GitHub release creation' || '' }}

          ### Release Notes
          This release includes all changes since v${{ steps.version.outputs.current }}.
          See CHANGELOG.md for detailed information.

          ---
          *Generated by release-pr workflow*" \
            --label "release" \
            --label "release-target:${{ inputs.target_environment }}" \
            --label "release-version:${{ steps.version.outputs.next }}" \
            --base main

          echo "::notice::Release PR created successfully"
          echo "::notice::Review and merge the PR to publish the release"

      - name: Summary
        if: always()
        run: |
          if [[ "${{ steps.version.outputs.needs_release }}" == "false" ]]; then
            {
              echo "## No Release Needed"
              echo "No changes detected since last release."
              echo ""
              echo "To create a release, ensure you have commits with:"
              echo "- \`feat:\` for new features (minor bump)"
              echo "- \`fix:\` for bug fixes (patch bump)"
              echo "- \`BREAKING CHANGE:\` for breaking changes (major bump)"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            {
              echo "## Release PR Created"
              echo "**Version**: ${{ steps.version.outputs.current }} → ${{ steps.version.outputs.next }}"
              echo "**Target**: ${{ inputs.target_environment }}"
              echo "**Branch**: ${{ steps.branch.outputs.branch_name }}"
              echo ""
              echo "### Next Steps:"
              echo "1. 📝 Review the PR for accuracy"
              echo "2. ✅ Ensure CI checks pass"
              echo "3. 🔀 Merge the PR to trigger release"
              echo ""
              echo "The release will be automatically published after merge."
            } >> "$GITHUB_STEP_SUMMARY"
          fi
