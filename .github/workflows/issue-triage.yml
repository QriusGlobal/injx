name: Issue Triage Automation

'on':
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - name: Welcome first-time contributors
        uses: actions/github-script@v8
        with:
          script: |
            // Check if this is a first-time contributor
            const creator = context.payload.sender.login
            const opts = github.rest.issues.listForRepo.endpoint.merge({
              ...context.issue,
              creator,
              state: 'all'
            })
            const issues = await github.paginate(opts)

            // Filter out the current issue and check if any others exist
            const otherIssues = issues.filter(issue => issue.number !== context.issue.number)

            if (otherIssues.length === 0) {
              // This is their first issue!
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `üëã **Welcome to injx!** Thank you for your first contribution!

                A maintainer will review your issue and provide feedback soon. In the meantime:

                - üìñ Check out our [documentation](https://github.com/QriusGlobal/injx#readme)
                - üîç Browse [existing issues](https://github.com/QriusGlobal/injx/issues) for similar problems
                - üí¨ Join discussions in other issues if you have insights to share

                We appreciate you taking the time to improve injx! ‚ú®`
              })
            }

      - name: Add helpful guidance based on issue type
        uses: actions/github-script@v8
        with:
          script: |
            const issueBody = context.payload.issue.body || '';
            const issueTitle = context.payload.issue.title || '';
            const labels = context.payload.issue.labels.map(label => label.name);

            let guidanceComment = '';

            // Guidance for bug reports
            if (labels.includes('bug')) {
              // Check if minimal reproducible example was provided
              if (!issueBody.includes('```python') && !issueBody.includes('```py')) {
                guidanceComment += `
            ## üêõ Bug Report Guidance

            Thank you for reporting a bug! To help us fix it quickly:

            **Missing: Code Example** - Please provide a minimal reproducible example showing the issue.

            \`\`\`python
            from injx import Container, Token

            # Your code that reproduces the issue
            \`\`\`

            This helps us understand and fix the problem much faster! üöÄ
            `;
              }
            }

            // Guidance for feature requests
            if (labels.includes('enhancement')) {
              guidanceComment += `
            ## ‚ú® Feature Request Guidance

            Thank you for the feature suggestion! A few tips:

            - **Use cases** help us understand the value of your request
            - **API examples** show how you'd like the feature to work
            - **Alternatives** you've tried help us understand the gap

            We'll review this and provide feedback on feasibility and priority. üìã
            `;
            }

            // Guidance for questions
            if (labels.includes('question')) {
              guidanceComment += `
            ## ‚ùì Question Guidance

            Great question! Before we answer:

            - Have you checked the [documentation](https://github.com/QriusGlobal/injx#readme)?
            - Any [examples](https://github.com/QriusGlobal/injx/tree/main/examples) that might help?
            - Similar [questions](https://github.com/QriusGlobal/injx/issues?q=is:issue+label:question)
              already answered?

            If this is a general "how do I..." question, we'll do our best to help!
            If it reveals a documentation gap, we might also improve the docs. üìö
            `;
            }

            // Post guidance comment if we have any
            if (guidanceComment.trim()) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: guidanceComment.trim()
              });
            }
