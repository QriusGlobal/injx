name: CI

'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - 'release/**'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Single CI job with adaptive behavior based on context
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791  # v4.1.0
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6.0.0
        with:
          python-version-file: "pyproject.toml"

      - name: Setup uv
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4  # v6.7.0
        with:
          version: "0.8.19"
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
          prune-cache: false

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      # Quality gates - always run
      - name: Format check (ruff)
        run: uv run ruff format --check src

      - name: Lint (ruff)
        run: uv run ruff check src

      - name: Type check (basedpyright)
        run: uv run basedpyright src

      # Determine test configuration based on context
      - name: Determine test configuration
        id: test-config
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "main" ]]; then
            echo "mode=full" >> "$GITHUB_OUTPUT"
            echo "::notice::Running FULL validation for PR targeting main"
          else
            echo "mode=basic" >> "$GITHUB_OUTPUT"
            echo "::notice::Running basic tests"
          fi

      # Run tests based on configuration
      - name: Run tests (basic)
        if: steps.test-config.outputs.mode == 'basic'
        env:
          PYTHONPATH: src
        run: |
          uv run pytest -q -n auto

      - name: Run tests with coverage
        if: steps.test-config.outputs.mode == 'full'
        env:
          PYTHONPATH: src
        run: |
          mkdir -p reports
          uv run pytest -q -n auto \
            --junitxml=reports/junit.xml \
            --cov=src --cov-report=xml

      # Additional validation for PRs to main
      - name: Validate recent commit messages
        if: steps.test-config.outputs.mode == 'full'
        run: |
          echo "Validating commits in range: origin/main~5..HEAD"
          git log --oneline origin/main~5..HEAD
          echo ""
          uv run cz check --rev-range origin/main~5..HEAD

      - name: Upload coverage to Codecov
        if: steps.test-config.outputs.mode == 'full'
        uses: codecov/codecov-action@015f24e6818733317a2da2edd6290ab26238649a  # v4.5.0
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test report (JUnit)
        if: steps.test-config.outputs.mode == 'full' && always()
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097  # v4.4.2
        with:
          name: junit-report
          path: reports/junit.xml

      - name: Build docs (verification only)
        if: steps.test-config.outputs.mode == 'full'
        run: uv run mkdocs build --strict

  # Distribution testing for main branch pushes - validate wheel/sdist build and installation
  distribution-test:
    name: Distribution Test (Build, Install, Validate)
    # TODO: Remove PR condition after testing - temporary for validating distribution tests in PR
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.head_ref == 'fix/distribution-test-improvements')
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791  # v4.1.0
        with:
          ref: ${{ github.sha }}

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6.0.0
        with:
          python-version-file: "pyproject.toml"

      # Fresh uv setup without cache for clean environment
      - name: Setup uv (fresh environment)
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4  # v6.7.0
        with:
          version: "0.8.19"
          enable-cache: false  # Explicitly no cache for clean testing

      - name: Build distribution packages
        run: |
          echo "Building wheel and sdist packages..."
          uv build --verbose
          echo "Built packages:"
          ls -la dist/

      - name: Create isolated test environment
        run: |
          echo "Creating fresh virtual environment..."
          uv venv dist-test-env --seed
          echo "VIRTUAL_ENV=${{ github.workspace }}/dist-test-env" >> "$GITHUB_ENV"
          echo "${{ github.workspace }}/dist-test-env/bin" >> "$GITHUB_PATH"

      - name: Install wheel package
        run: |
          echo "Installing built wheel (not from source)..."
          # Install only the built wheel, not source
          uv pip install dist/*.whl --verbose

          echo "Installing test dependencies..."
          uv pip install pytest pytest-asyncio

          echo "Installed packages:"
          uv pip list

      - name: Verify basic import
        working-directory: /tmp
        run: |
          python -c "
          import sys
          print(f'Python: {sys.version}')
          print(f'Path: {sys.path}')

          # Basic import test
          import injx
          print(f'✅ Successfully imported injx v{injx.__version__}')

          # Verify not importing from source
          import inspect
          print(f'Injx location: {inspect.getfile(injx)}')
          assert 'src' not in inspect.getfile(injx), 'ERROR: Importing from source!'

          # Test core imports
          from injx import Container, Token, Scope
          print('✅ Core imports successful')
          "

      - name: Run distribution tests with pytest
        working-directory: /tmp
        run: |
          echo "Running distribution tests from neutral directory..."
          # Run from /tmp to ensure no source contamination
          python -m pytest \
            ${{ github.workspace }}/tests/test_distribution.py \
            -v \
            -m distribution \
            --tb=short \
            --color=yes \
            -o log_cli=true \
            -o log_cli_level=INFO

