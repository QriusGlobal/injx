name: CI

'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - 'release/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # For PRs, check out the PR head exactly; for pushes, use the push SHA
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: '3.13'
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          activate-environment: true

      - name: Install project (dev)
        run: |
          uv pip install -e .[dev]

      - name: Format check (ruff)
        run: |
          uvx ruff format --check src

      - name: Lint (ruff)
        run: |
          uvx ruff check src

      - name: Type check (basedpyright)
        run: |
          uvx basedpyright src

  tests:
    runs-on: ubuntu-latest
    needs: gate
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: '3.13'
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          activate-environment: true

      - name: Install project (dev)
        run: |
          uv pip install -e .[dev]

      - name: Tests with coverage (pytest-cov)
        env:
          PYTHONPATH: src
        run: |
          uv pip install pytest-cov pytest-xdist
          mkdir -p reports
          uv run pytest \
            -q -ra --maxfail=1 \
            --junitxml=reports/junit.xml \
            --cov=src --cov-report=xml \
            -n auto

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test report (JUnit)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-report
          path: reports/junit.xml

  docs:
    runs-on: ubuntu-latest
    needs: gate
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: '3.13'
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          activate-environment: true

      - name: Install docs dependencies
        run: |
          uv pip install mkdocs-material mkdocs-minify-plugin mkdocstrings[python] mike

      - name: Build docs
        run: |
          uv run mkdocs build
